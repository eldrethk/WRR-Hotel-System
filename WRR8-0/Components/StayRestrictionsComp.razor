@rendermode RenderMode.InteractiveServer
@using WRRManagement.Domain.RoomTypes
@inject IMinStay minStayService
@inject IRoomType roomTypeService

<div>
    <p class="h2 text-info text-center">@RoomName</p>
    <div id='calendar'>
        <Scheduler @ref="scheduler" DataSource="dataRecords" View="SchedulerViewType.Month" OnItemClick="OnItemClick" OnChange="OnChange" ShadeUntilCurrentTime="true" DisableWindowEditor="true" DisableDateMenu="true" DisableEventMenu="true" DisableContextMenu="true" DisableAutoScroll="true" DisableDrag="true" DisableResize="true">
        </Scheduler>
    </div>
</div>


<Modal @ref="modal">
    <HeaderTemplate>
        <h2 class="modal-title text-primary form-padding-left">Min Night Stay</h2>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="form-horizontal modal-body">
            <h3>@RoomName</h3>
            <div class="form-group">
                <label class="control-label col-md-4">Date:</label>
                <div class="col-md-10">
                    @currentEvent.StayDate.ToShortDateString()
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-4">Quantity:</label>
                <div class="col-md-10">
                    <InputNumber @bind-Value="Qty" class="form-control" />
                    <span class="text-danger">@validationMsg</span>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-success" @onclick="Save">Save</button>
        <button class="btn btn-secondary" @onclick="Close">Close</button>
    </FooterTemplate>
</Modal>


@code {

    [Parameter]
    public int RoomID { get; set; }

    [Parameter]
    public string? RoomName { get; set; }

    public int? Qty { get; set; }

    private Scheduler scheduler = null!; // Add null! to indicate non-nullability
    private MinStay currentEvent = new MinStay();
    private List<SchedulerDataSource> dataRecords = new();
    private List<MinStay> minStayList = new();

    private Modal modal = default!;
    private string? validationMsg;

    protected override async Task OnInitializedAsync()
    {
        if(RoomID > 0)
        {
            RoomName = roomTypeService.GetById(RoomID).Name;
            minStayList = minStayService.GetAllForRoom(RoomID);
            dataRecords = minStayList.Select(ConvertMinStaytoSchedulerDataSource).ToList();
        }
        await base.OnInitializedAsync();
    }

    private string ValidateQty()
    {
        if (Qty == null)
            return "Quantity is required";
        else if (Qty < 0)
            return "Quantity must be greater than 0";

        return string.Empty;
    }

    public void Save()
    {
        validationMsg = ValidateQty();
        if (string.IsNullOrEmpty(validationMsg))
        {
            currentEvent.MinNightStay = Qty ?? 0;
            if(currentEvent.MinStayID > 0)
            {
                minStayService.Update(currentEvent.MinNightStay, currentEvent.MinStayID);
                dataRecords.Remove(dataRecords.Find(x => x.Id == currentEvent.MinStayID.ToString()));
            }
            else if(currentEvent.StayDate > DateTime.MinValue)
            {
                currentEvent.MinStayID = minStayService.Add(RoomID, currentEvent.StayDate, currentEvent.MinNightStay);
            }

            var updateEvent = ConvertMinStaytoSchedulerDataSource(currentEvent);
            dataRecords.Add(updateEvent);
            dataRecords = new List<SchedulerDataSource>(dataRecords);

            modal.HideAsync();
            currentEvent = new MinStay();
            scheduler.Refresh();
        }
        else
        {
            StateHasChanged();
        }
    }

    public void Close()
    {
        modal.HideAsync();
    }


    private async Task OnChange(Event ev)
    {
        if(ev.TryGetValue("detail", out var detailObj))
        {
            if(detailObj is JsonElement jsonElement)
            {
                if(jsonElement.TryGetProperty("dateStart", out var dateStartProp))
                {
                    currentEvent.StayDate = dateStartProp.GetDateTime();
                    Qty = null;
                }
            }
        }
        if (currentEvent.StayDate >= DateTime.Today)
            await modal.ShowAsync();
    }

    private async Task OnItemClick(Event ev)
    {
        SchedulerItemClickEventDetail itemClickEventDetail = ev["Detail"];
        var obj = itemClickEventDetail.ItemObj;
        SchedulerEvent schedulerEvent = obj.ToObject<SchedulerEvent>() ?? new SchedulerEvent();

        currentEvent = new MinStay
        {
                StayDate = Convert.ToDateTime(schedulerEvent.DateStart),
                MinNightStay = Convert.ToInt32(schedulerEvent.Label),
                MinStayID = Convert.ToInt32(schedulerEvent.Id)
        };

        Qty = currentEvent.MinNightStay;
        await modal.ShowAsync();
    }
    public SchedulerDataSource ConvertMinStaytoSchedulerDataSource(MinStay model)
    {
        if (model == null)
            throw new ArgumentNullException(nameof(model));

        string color = "#000";

        if (model.MinNightStay >= 10)
            color = "#F04123";
        else if (model.MinNightStay <= 9 && model.MinNightStay > 3)
            color = "#E99002";
        else
            color = "#43ac6a"; 

        return new SchedulerDataSource()
            {
                Id = model.MinStayID.ToString(),
                Label = model.MinNightStay.ToString(),
                DateStart = model.StayDate,
                DateEnd = model.StayDate,
                AllDay = true,
                Color = color
            };
    }
}
